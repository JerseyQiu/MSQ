using System;
using System.Activities;
using System.Linq;
using System.Xml.Linq;
using Impac.Mosaiq.BOM.Entities;
using Impac.Mosaiq.IQ.Core.Definitions.Activities;
using Impac.Mosaiq.IQ.Core.Framework.Activities;

namespace Impac.Mosaiq.IQ.Activities.General.Orders
{
    /// <summary>
    /// This activity takes an orc_set_id and a "Context" value as in put and spits out a chunk of XML that will be the same
    /// for orders that are clinically the same (same procedures for observation orders and same drugs, doses and units for 
    /// pharmacy orders).  In addition, an optional context string can be provided so that the XML can be made "context specific",
    /// which IQ terms really means specific to a particular script, preference or assignment (but other things like date could
    /// be used too).
    /// 
    /// The primary use case for this activity is to generate a chunk of information about an order so that we can record a 
    /// decision that was made when the IQ Script ran against one order and make that same decision against another order that
    /// is clinically the same.  This use case primarily occurs with order approval where many orders which are esseentially 
    /// duplicates are processed sequentially through the order queuing mechanism.  In those cases, we don't want the IQ
    /// engine to propmt for each duplicate record.  We just want it to prompt for the first and assume the same decision for
    /// any duplicate orders.
    /// </summary>
    [GetOrderClinicalDetailActivity_DisplayName]
    [Orders_Category]
    [GeneralCharting_ActivityGroup]
    public class GetOrderClinicalDetailActivity : MosaiqCodeActivity
    {
        #region Properties (Input Parameters)
        /// <summary>
        /// Optional context value to be stored w/ the XML
        /// </summary>
        [InputParameterCategory]
        [GetOrderClinicalDetailActivity_ContextValue_DisplayName]
        [GetOrderClinicalDetailActivity_ContextValue_Description]
        public InArgument<String> ContextValue { get; set; }

        /// <summary>
        /// Orc_Set_Id of the order being looked up.
        /// </summary>
        [RequiredArgument]
        [InputParameterCategory]
        [GetOrderClinicalDetailActivity_OrcSetId_DisplayName]
        [GetOrderClinicalDetailActivity_OrcSetId_Description]
        public InArgument<int> OrcSetId { get; set; }
        #endregion

        #region Properties (Output Parameters)
        /// <summary>
        /// Output XML generated by activity.
        /// </summary>
        [OutputParameterCategory]
        [GetOrderClinicalDetailActivity_Result_DisplayName]
        [GetOrderClinicalDetailActivity_Result_Description]
        public OutArgument<String> Result { get; set; }
        #endregion

        #region Overriden Methods
        /// <summary> Lookup the order and generate some XML that represents it. </summary>
        /// <param name="context"></param>
        protected override void DoWork(CodeActivityContext context)
        {
            string contextValue = ContextValue.Get(context) ?? String.Empty;
            int orcSetId = OrcSetId.Get(context);

            var order = BOM.Entities.Orders.GetEntityBySetIDAndVersion0(orcSetId, PM);

            var main = new XElement("Detail");
            main.Add(new XElement("PatId1", order.Pat_ID1.GetValueOrDefault(0)));

            if (!String.IsNullOrEmpty(contextValue))
                main.Add(new XElement("ContextValue", contextValue));

            var components = new XElement("Components");
            main.Add(components);

            //Observation Orders);
            if (order.OrderType == BOM.Entities.Orders.OrderTypes.Observation)
            {
                var procs = order.ObsReqEntitiesOnOrcSet.OrderBy(e => e.PRS_ID);
                foreach (ObsReq proc in procs)
                {
                    var procElement = new XElement("Procedure");
                    procElement.Add(new XAttribute("Prs_Id", proc.PRS_ID.GetValueOrDefault(-1)));
                    components.Add(procElement);
                }
            }
            //Pharmacy Order (post ATLAS orders)
            else if (order.OrderType == BOM.Entities.Orders.OrderTypes.InHouseTreat ||
               order.OrderType == BOM.Entities.Orders.OrderTypes.InHousePickup ||
                order.OrderType == BOM.Entities.Orders.OrderTypes.ExternalPickup)
            {
                var pharmOrds = order.PharmOrdEntitiesOnOrcSet
                    .OrderBy(e => e.Req_Give_Code)
                    .ThenBy(e => e.Ordering_Dose_Max)
                    .ThenBy(e => e.Ordering_Dose_Min)
                    .ThenBy(e => e.Req_Give_Units);
                
                foreach (PharmOrd pharmOrd in pharmOrds)
                {
                    var drugElement = new XElement("Drug");
                    drugElement.Add(new XAttribute("DrugId", pharmOrd.Req_Give_Code.GetValueOrDefault(-1)));
                    drugElement.Add(new XAttribute("Order_Dose_Max", pharmOrd.Ordering_Dose_Max.GetValueOrDefault(-1)));
                    drugElement.Add(new XAttribute("Order_Dose_Min", pharmOrd.Ordering_Dose_Min.GetValueOrDefault(-1)));
                    drugElement.Add(new XAttribute("Order_Dose_Units", pharmOrd.Ordering_Dose_Units_OBD_ID.GetValueOrDefault(-1)));
                    components.Add(drugElement);
                }
            }
            //Legacy Pharmacy orders
            else if (order.OrderType == BOM.Entities.Orders.OrderTypes.Pharmacy)
            {
                var pharmOrds = order.PharmOrdEntitiesOnOrcSet
                    .OrderBy(e => e.Req_Give_Code)
                    .ThenBy(e => e.Req_Give_Max)
                    .ThenBy(e => e.Req_Give_Min)
                    .ThenBy(e => e.Req_Give_Units);

                foreach (PharmOrd pharmOrd in pharmOrds)
                {
                    var drugElement = new XElement("Drug");
                    drugElement.Add(new XAttribute("DrugId", pharmOrd.Req_Give_Code.GetValueOrDefault(-1)));
                    drugElement.Add(new XAttribute("Req_Give_Max", pharmOrd.Req_Give_Max));
                    drugElement.Add(new XAttribute("Req_Give_Min", pharmOrd.Req_Give_Min.GetValueOrDefault(-1)));
                    drugElement.Add(new XAttribute("Req_Give_Units", pharmOrd.Req_Give_Units.GetValueOrDefault(-1)));
                    components.Add(drugElement);
                }
            }
            else
            {
                main.Add(new XElement ("Orc_Set_Id", orcSetId));
            }

            Result.Set(context, main.ToString());
        }
        #endregion
    }
}
